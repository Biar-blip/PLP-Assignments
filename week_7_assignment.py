# -*- coding: utf-8 -*-
"""Iris Dataset Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1abc123def456ghi789jkl
"""

# Iris Dataset Analysis
# This notebook performs exploratory data analysis and visualization on the famous Iris dataset

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
import warnings
warnings.filterwarnings('ignore')

# Set plotting style
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# Task 1: Load and Explore the Dataset
print("="*50)
print("TASK 1: LOAD AND EXPLORE THE DATASET")
print("="*50)

try:
    # Load the Iris dataset
    iris = load_iris()
    iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)
    iris_df['species'] = iris.target
    iris_df['species'] = iris_df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})
    
    print("Dataset loaded successfully!")
    print(f"Dataset shape: {iris_df.shape}")
    
except Exception as e:
    print(f"Error loading dataset: {e}")

# Display first few rows
print("\nFirst 5 rows of the dataset:")
print(iris_df.head())

# Explore dataset structure
print("\nDataset information:")
print(iris_df.info())

print("\nData types:")
print(iris_df.dtypes)

# Check for missing values
print("\nMissing values:")
print(iris_df.isnull().sum())

# Since there are no missing values, no cleaning is needed
print("\nNo missing values found. Dataset is clean!")

# Task 2: Basic Data Analysis
print("\n" + "="*50)
print("TASK 2: BASIC DATA ANALYSIS")
print("="*50)

# Basic statistics
print("Basic statistics for numerical columns:")
print(iris_df.describe())

# Group by species and compute mean of numerical columns
print("\nMean values by species:")
species_means = iris_df.groupby('species').mean()
print(species_means)

# Additional analysis: Compare sepal and petal measurements
print("\nSepal length comparison by species:")
print(iris_df.groupby('species')['sepal length (cm)'].agg(['mean', 'std', 'min', 'max']))

print("\nPetal length comparison by species:")
print(iris_df.groupby('species')['petal length (cm)'].agg(['mean', 'std', 'min', 'max']))

# Interesting findings
print("\n" + "="*50)
print("INTERESTING FINDINGS FROM ANALYSIS:")
print("="*50)
print("1. Setosa species has the smallest petal measurements")
print("2. Virginica has the largest sepal and petal measurements")
print("3. Versicolor falls in between setosa and virginica in all measurements")
print("4. Petal measurements show clearer separation between species than sepal measurements")

# Task 3: Data Visualization
print("\n" + "="*50)
print("TASK 3: DATA VISUALIZATION")
print("="*50)

# Create a figure with subplots
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('Iris Dataset Visualizations', fontsize=16, fontweight='bold')

# 1. Line chart showing trends (using index as pseudo-time)
# We'll create a line chart showing the distribution of sepal length across samples
axes[0, 0].plot(iris_df.index, iris_df['sepal length (cm)'], 
                color='blue', alpha=0.7, linewidth=1)
axes[0, 0].set_title('Sepal Length Distribution Across Samples')
axes[0, 0].set_xlabel('Sample Index')
axes[0, 0].set_ylabel('Sepal Length (cm)')
axes[0, 0].grid(True, alpha=0.3)

# 2. Bar chart - average measurements by species
species_means.plot(kind='bar', ax=axes[0, 1])
axes[0, 1].set_title('Average Measurements by Iris Species')
axes[0, 1].set_xlabel('Species')
axes[0, 1].set_ylabel('Measurement (cm)')
axes[0, 1].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
axes[0, 1].tick_params(axis='x', rotation=45)

# 3. Histogram - distribution of petal length
axes[1, 0].hist(iris_df['petal length (cm)'], bins=15, 
                color='green', alpha=0.7, edgecolor='black')
axes[1, 0].set_title('Distribution of Petal Length')
axes[1, 0].set_xlabel('Petal Length (cm)')
axes[1, 0].set_ylabel('Frequency')
axes[1, 0].grid(True, alpha=0.3)

# 4. Scatter plot - sepal length vs petal length
colors = {'setosa': 'red', 'versicolor': 'blue', 'virginica': 'green'}
for species, color in colors.items():
    species_data = iris_df[iris_df['species'] == species]
    axes[1, 1].scatter(species_data['sepal length (cm)'], 
                      species_data['petal length (cm)'], 
                      color=color, alpha=0.7, label=species)

axes[1, 1].set_title('Sepal Length vs Petal Length by Species')
axes[1, 1].set_xlabel('Sepal Length (cm)')
axes[1, 1].set_ylabel('Petal Length (cm)')
axes[1, 1].legend()
axes[1, 1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Additional visualizations
print("\nAdditional visualizations:")

# Box plot to show distribution by species
plt.figure(figsize=(12, 6))
iris_df.boxplot(by='species', figsize=(12, 8))
plt.suptitle('Measurement Distributions by Species')
plt.show()

# Pair plot for comprehensive relationship analysis
plt.figure(figsize=(12, 8))
sns.pairplot(iris_df, hue='species', palette=colors)
plt.suptitle('Pair Plot of Iris Dataset Features', y=1.02)
plt.show()

# Correlation heatmap
plt.figure(figsize=(8, 6))
numeric_df = iris_df.select_dtypes(include=[np.number])
correlation_matrix = numeric_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

print("\n" + "="*50)
print("SUMMARY OF FINDINGS:")
print("="*50)
print("1. The Iris dataset contains 150 samples with 4 features and 1 target variable")
print("2. No missing values were found in the dataset")
print("3. Setosa species has distinctively smaller petal measurements")
print("4. Petal measurements provide better separation between species than sepal measurements")
print("5. Strong positive correlation exists between petal length and petal width")
print("6. Virginica species shows the largest variability in measurements")
print("7. The dataset is well-balanced with 50 samples per species")

print("\nAnalysis completed successfully!")